var searchIndex={};
searchIndex["rair_env"] = {"doc":"","i":[[3,"Environment","rair_env","",null,null],[4,"EnvData","","",null,null],[13,"Str","","",0,null],[13,"U64","","",0,null],[13,"I64","","",0,null],[13,"Bool","","",0,null],[13,"Color","","",0,null],[4,"EnvErr","","",null,null],[13,"NotFound","","",1,null],[13,"DifferentType","","",1,null],[13,"CbFailed","","",1,null],[13,"AlreadyExist","","",1,null],[11,"new","","",2,[[],["self"]]],[11,"add_str_with_cb","","",2,[[["str"],["strfn"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_str","","",2,[[["str"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_str","","",2,[[["str"],["self"]],[["result",["str","enverr"]],["str"],["enverr"]]]],[11,"set_str","","",2,[[["str"],["self"],["t"]],[["enverr"],["result",["enverr"]]]]],[11,"is_str","","",2,[[["str"],["self"]],["bool"]]],[11,"add_u64_with_cb","","",2,[[["str"],["t"],["self"],["u64"],["u64fn"]],[["enverr"],["result",["enverr"]]]]],[11,"add_u64","","",2,[[["str"],["self"],["u64"]],[["enverr"],["result",["enverr"]]]]],[11,"get_u64","","",2,[[["str"],["self"]],[["result",["u64","enverr"]],["u64"],["enverr"]]]],[11,"set_u64","","",2,[[["str"],["t"],["self"],["u64"]],[["enverr"],["result",["enverr"]]]]],[11,"is_u64","","",2,[[["str"],["self"]],["bool"]]],[11,"add_i64_with_cb","","",2,[[["str"],["i64"],["t"],["i64fn"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_i64","","",2,[[["str"],["i64"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_i64","","",2,[[["str"],["self"]],[["result",["i64","enverr"]],["i64"],["enverr"]]]],[11,"set_i64","","",2,[[["str"],["i64"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"is_i64","","",2,[[["str"],["self"]],["bool"]]],[11,"add_bool_with_cb","","",2,[[["str"],["t"],["boolfn"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"add_bool","","",2,[[["str"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"get_bool","","",2,[[["str"],["self"]],[["bool"],["enverr"],["result",["bool","enverr"]]]]],[11,"set_bool","","",2,[[["str"],["t"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"is_bool","","",2,[[["str"],["self"]],["bool"]]],[11,"add_color_with_cb","","",2,[[["str"],["colorfn"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_color","","",2,[[["str"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_color","","",2,[[["str"],["self"]],[["result",["enverr"]],["enverr"]]]],[11,"set_color","","",2,[[["str"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"is_color","","",2,[[["str"],["self"]],["bool"]]],[11,"reset","","",2,[[["str"],["self"],["t"]],[["enverr"],["result",["enverr"]]]]],[11,"get","","",2,[[["str"],["self"]],[["envdata"],["option",["envdata"]]]]],[11,"get_help","","",2,[[["str"],["self"]],[["str"],["option",["str"]]]]],[11,"iter","","",2,[[["self"]],[["iterator"],["box",["iterator"]]]]],[6,"StrFn","","",null,null],[6,"U64Fn","","",null,null],[6,"I64Fn","","",null,null],[6,"BoolFn","","",null,null],[6,"ColorFn","","",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"default","","",2,[[],["environment"]]],[11,"eq","","",0,[[["self"],["envdata"]],["bool"]]],[11,"ne","","",0,[[["self"],["envdata"]],["bool"]]],[11,"eq","","",1,[[["enverr"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[4,"EnvData"],[4,"EnvErr"],[3,"Environment"]]};
searchIndex["rair_io"] = {"doc":"","i":[[3,"RIODesc","rair_io","",null,null],[3,"RIO","","",null,null],[3,"RIOMap","","",null,null],[12,"paddr","","",0,null],[12,"vaddr","","",0,null],[12,"size","","",0,null],[3,"RIOPluginMetadata","","",null,null],[12,"name","","",1,null],[12,"desc","","",1,null],[12,"author","","",1,null],[12,"license","","",1,null],[12,"version","","",1,null],[3,"RIOPluginDesc","","",null,null],[12,"name","","",2,null],[12,"perm","","",2,null],[12,"raddr","","",2,null],[12,"size","","",2,null],[12,"plugin_operations","","",2,null],[3,"IoMode","","",null,null],[4,"IoError","","",null,null],[13,"AddressNotFound","","",3,null],[13,"AddressesOverlapError","","",3,null],[13,"IoPluginNotFoundError","","",3,null],[13,"HndlNotFoundError","","",3,null],[13,"TooManyFilesError","","",3,null],[13,"Custom","","",3,null],[13,"Parse","","",3,null],[11,"name","","Returns URI of current file descriptor.",4,[[["self"]],["str"]]],[11,"has_paddr","","Returns true if paddr exists in this file descriptor and…",4,[[["self"],["u64"]],["bool"]]],[11,"paddr_base","","Returns the base physical address of this file.",4,[[["self"]],["u64"]]],[11,"size","","Returns size of file on disk.",4,[[["self"]],["u64"]]],[11,"perm","","Returns the permissions which the file was opened with.",4,[[["self"]],["iomode"]]],[11,"hndl","","Returns the Handle of given file descriptor.",4,[[["self"]],["u64"]]],[11,"new","","Returns new Input/Output interface to be used",5,[[],["rio"]]],[11,"load_plugin","","THIS FUNCTION IS NOT SUPPOSED TO BE THAT TRIVIAL I WANT IT…",5,[[["box",["rioplugin"]],["self"],["rioplugin"]]]],[11,"open","","Allows us to open file and have it accessable from out…",5,[[["str"],["self"],["iomode"]],[["ioerror"],["result",["u64","ioerror"]],["u64"]]]],[11,"open_at","","Allows us to open file and have it accessable from out…",5,[[["str"],["iomode"],["self"],["u64"]],[["ioerror"],["result",["u64","ioerror"]],["u64"]]]],[11,"close","","Close an opened file, delete its physical and virtual…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"close_all","","Close all open files, and reset all virtual and physical…",5,[[["self"]]]],[11,"pread","","Read from the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"pread_sparce","","Read from the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["ioerror"],["result",["btreemap","ioerror"]],["btreemap",["u64","u8"]]]]],[11,"pwrite","","Write into the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"map","","Map memory regions from physical address space to virtual…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"unmap","","unmap already mapped regions",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vread","","read memory from virtual address space. If there is no…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vread_sparce","","read memory from virtual address space. Data is stored in…",5,[[["self"],["u64"]],[["ioerror"],["result",["btreemap","ioerror"]],["btreemap",["u64","u8"]]]]],[11,"vwrite","","write memory into virtual address space",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vir_to_phy","","convert virtual address to physical address",5,[[["self"],["u64"]],[["option",["vec"]],["vec",["riomap"]]]]],[11,"phy_to_vir","","This funciton reverse-queries individual physical…",5,[[["self"],["u64"]],[["vec",["u64"]],["u64"]]]],[11,"uri_iter","","Iterate over open URIs",5,[[["self"]],[["box",["iterator"]],["iterator"]]]],[11,"map_iter","","Iterate over memory maps",5,[[["self"]],[["box",["iterator"]],["iterator"]]]],[11,"hndl_to_desc","","",5,[[["self"],["u64"]],[["option",["riodesc"]],["riodesc"]]]],[18,"WRITE","","",6,null],[18,"READ","","",6,null],[18,"COW","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["iomode"]]],[11,"all","","Returns the set containing all flags.",6,[[],["iomode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[["u64"]],[["option",["iomode"]],["iomode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[["u64"]],["iomode"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[["u64"]],["iomode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["self"],["iomode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["self"],["iomode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["self"],["iomode"],["bool"]]]],[8,"RIOPlugin","","",null,null],[10,"get_metadata","","",7,[[["self"]],["riopluginmetadata"]]],[10,"open","","",7,[[["str"],["self"],["iomode"]],[["ioerror"],["rioplugindesc"],["result",["rioplugindesc","ioerror"]]]]],[10,"accept_uri","","",7,[[["str"],["self"]],["bool"]]],[8,"RIOPluginOperations","","",null,null],[10,"read","","",8,[[["self"],["usize"]],[["result",["ioerror"]],["ioerror"]]]],[10,"write","","",8,[[["self"],["usize"]],[["result",["ioerror"]],["ioerror"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",3,[[["error"]],["ioerror"]]],[11,"extend","","",6,[[["intoiterator"],["self"]]]],[11,"clone","","",0,[[["self"]],["riomap"]]],[11,"clone","","",6,[[["self"]],["iomode"]]],[11,"default","","",5,[[],["rio"]]],[11,"default","","",6,[[],["iomode"]]],[11,"cmp","","",6,[[["self"],["iomode"]],["ordering"]]],[11,"eq","","",0,[[["self"],["riomap"]],["bool"]]],[11,"ne","","",0,[[["self"],["riomap"]],["bool"]]],[11,"eq","","",0,[[["self"],["rc"]],["bool"]]],[11,"eq","","",1,[[["riopluginmetadata"],["self"]],["bool"]]],[11,"ne","","",1,[[["riopluginmetadata"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["iomode"]],["bool"]]],[11,"ne","","",6,[[["self"],["iomode"]],["bool"]]],[11,"eq","","",3,[[["ioerror"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["iomode"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["iomode"]],["bool"]]],[11,"le","","",6,[[["self"],["iomode"]],["bool"]]],[11,"gt","","",6,[[["self"],["iomode"]],["bool"]]],[11,"ge","","",6,[[["self"],["iomode"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["iomode"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["iomode"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["iomode"]],["iomode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["iomode"]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["iomode"]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["iomode"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"from_iter","","",6,[[["intoiterator"]],["iomode"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["s"],["self"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],[["result",["rio"]],["rio"]]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]]],"p":[[3,"RIOMap"],[3,"RIOPluginMetadata"],[3,"RIOPluginDesc"],[4,"IoError"],[3,"RIODesc"],[3,"RIO"],[3,"IoMode"],[8,"RIOPlugin"],[8,"RIOPluginOperations"]]};
searchIndex["rcore"] = {"doc":"","i":[[3,"Commands","rcore","",null,null],[3,"Core","","",null,null],[12,"mode","","",0,null],[12,"io","","",0,null],[12,"stdout","","",0,null],[12,"stderr","","",0,null],[12,"env","","",0,null],[3,"CmdFunctions","","",null,null],[12,"run","","",1,null],[12,"help","","",1,null],[4,"AddrMode","","",null,null],[13,"Vir","","",2,null],[13,"Phy","","",2,null],[4,"Writer","","This union acts as thin abstraction layer over over input…",null,null],[5,"str_to_num","","",null,[[["str"]],[["result",["u64","parseinterror"]],["u64"],["parseinterror"]]]],[5,"expect","","",null,[[["core"],["u64"]]]],[5,"expect_range","","",null,[[["core"],["u64"]]]],[5,"error_msg","","",null,[[["core"],["str"]]]],[5,"panic_msg","","",null,[[["core"],["str"]]]],[5,"help","","",null,[[["str"],["core"],["vec"]]]],[5,"is_color","","",null,[[["str"],["core"],["environment"]],["bool"]]],[5,"register_io","","",null,[[["core"]]]],[11,"add_command","","",3,[[["str"],["cmd"],["self"],["mrc",["cmd"]]],["bool"]]],[11,"find","","",3,[[["str"],["self"]],[["mrc",["cmd"]],["option",["mrc"]]]]],[11,"suggest","","",3,[[["str"],["self"],["u64"]],[["vec",["string"]],["string"]]]],[11,"prefix","","",3,[[["str"],["self"]],[["vec",["str"]],["str"]]]],[11,"commands","","Returns list of all available commands in [Core].",0,[[["self"]],[["rc",["refcell"]],["refcell",["commands"]]]]],[11,"set_commands","","",0,[[["self"],["rc",["refcell"]],["refcell",["commands"]]]]],[11,"new","","",0,[[],["self"]]],[11,"new_no_colors","","",0,[[],["self"]]],[11,"set_loc","","",0,[[["self"],["u64"]]]],[11,"get_loc","","",0,[[["self"]],["u64"]]],[11,"add_command","","",0,[[["str"],["cmd"],["self"],["mrc",["cmd"]]]]],[11,"run","","",0,[[["str"],["self"]]]],[11,"run_at","","",0,[[["str"],["self"],["u64"]]]],[11,"help","","",0,[[["str"],["self"]]]],[11,"new_write","","Creates a new [Writer] backed by object that implements…",4,[[["box",["write"]],["write"]],["self"]]],[11,"new_buf","","Returns a new buffer based [Writer].",4,[[],["self"]]],[11,"bytes","","This function consumes the [Writer] object, it returns the…",4,[[],[["option",["vec"]],["vec",["u8"]]]]],[11,"utf8_string","","This function consumes the [Writer] object, it returns…",4,[[],[["option",["string"]],["string"]]]],[11,"bytes_ref","","This function returns a reference to the data stored in…",4,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"bytes_mut","","This function returns a mutable reference to the data…",4,[[["self"]],[["vec"],["option",["vec"]]]]],[6,"MRc","","",null,null],[8,"Cmd","","",null,null],[10,"run","","",5,[[["core"],["self"]]]],[10,"help","","",5,[[["core"],["self"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["addrmode"]]],[11,"default","","",3,[[],["commands"]]],[11,"default","","",0,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"eq","","",2,[[["addrmode"],["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"write","","",4,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",4,[[["self"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]]],"p":[[3,"Core"],[3,"CmdFunctions"],[4,"AddrMode"],[3,"Commands"],[4,"Writer"],[8,"Cmd"]]};
searchIndex["renv"] = {"doc":"","i":[[3,"Environment","renv","",null,null],[4,"EnvData","","",null,null],[13,"Str","","",0,null],[13,"U64","","",0,null],[13,"I64","","",0,null],[13,"Bool","","",0,null],[13,"Color","","",0,null],[4,"EnvErr","","",null,null],[13,"NotFound","","",1,null],[13,"DifferentType","","",1,null],[13,"CbFailed","","",1,null],[13,"AlreadyExist","","",1,null],[11,"new","","",2,[[],["self"]]],[11,"add_str_with_cb","","",2,[[["str"],["strfn"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_str","","",2,[[["str"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_str","","",2,[[["str"],["self"]],[["result",["str","enverr"]],["str"],["enverr"]]]],[11,"set_str","","",2,[[["str"],["self"],["t"]],[["enverr"],["result",["enverr"]]]]],[11,"is_str","","",2,[[["str"],["self"]],["bool"]]],[11,"add_u64_with_cb","","",2,[[["str"],["t"],["self"],["u64"],["u64fn"]],[["enverr"],["result",["enverr"]]]]],[11,"add_u64","","",2,[[["str"],["self"],["u64"]],[["enverr"],["result",["enverr"]]]]],[11,"get_u64","","",2,[[["str"],["self"]],[["result",["u64","enverr"]],["u64"],["enverr"]]]],[11,"set_u64","","",2,[[["str"],["t"],["self"],["u64"]],[["enverr"],["result",["enverr"]]]]],[11,"is_u64","","",2,[[["str"],["self"]],["bool"]]],[11,"add_i64_with_cb","","",2,[[["str"],["i64"],["t"],["i64fn"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_i64","","",2,[[["str"],["i64"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_i64","","",2,[[["str"],["self"]],[["result",["i64","enverr"]],["i64"],["enverr"]]]],[11,"set_i64","","",2,[[["str"],["i64"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"is_i64","","",2,[[["str"],["self"]],["bool"]]],[11,"add_bool_with_cb","","",2,[[["str"],["t"],["boolfn"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"add_bool","","",2,[[["str"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"get_bool","","",2,[[["str"],["self"]],[["bool"],["enverr"],["result",["bool","enverr"]]]]],[11,"set_bool","","",2,[[["str"],["t"],["self"],["bool"]],[["enverr"],["result",["enverr"]]]]],[11,"is_bool","","",2,[[["str"],["self"]],["bool"]]],[11,"add_color_with_cb","","",2,[[["str"],["colorfn"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"add_color","","",2,[[["str"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"get_color","","",2,[[["str"],["self"]],[["result",["enverr"]],["enverr"]]]],[11,"set_color","","",2,[[["str"],["t"],["self"]],[["enverr"],["result",["enverr"]]]]],[11,"is_color","","",2,[[["str"],["self"]],["bool"]]],[11,"reset","","",2,[[["str"],["self"],["t"]],[["enverr"],["result",["enverr"]]]]],[11,"get","","",2,[[["str"],["self"]],[["envdata"],["option",["envdata"]]]]],[11,"get_help","","",2,[[["str"],["self"]],[["str"],["option",["str"]]]]],[11,"iter","","",2,[[["self"]],[["iterator"],["box",["iterator"]]]]],[6,"StrFn","","",null,null],[6,"U64Fn","","",null,null],[6,"I64Fn","","",null,null],[6,"BoolFn","","",null,null],[6,"ColorFn","","",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"default","","",2,[[],["environment"]]],[11,"eq","","",0,[[["self"],["envdata"]],["bool"]]],[11,"ne","","",0,[[["self"],["envdata"]],["bool"]]],[11,"eq","","",1,[[["enverr"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[4,"EnvData"],[4,"EnvErr"],[3,"Environment"]]};
searchIndex["rio"] = {"doc":"","i":[[3,"RIODesc","rio","",null,null],[3,"RIO","","",null,null],[3,"RIOMap","","",null,null],[12,"paddr","","",0,null],[12,"vaddr","","",0,null],[12,"size","","",0,null],[3,"RIOPluginMetadata","","",null,null],[12,"name","","",1,null],[12,"desc","","",1,null],[12,"author","","",1,null],[12,"license","","",1,null],[12,"version","","",1,null],[3,"RIOPluginDesc","","",null,null],[12,"name","","",2,null],[12,"perm","","",2,null],[12,"raddr","","",2,null],[12,"size","","",2,null],[12,"plugin_operations","","",2,null],[3,"IoMode","","",null,null],[4,"IoError","","",null,null],[13,"AddressNotFound","","",3,null],[13,"AddressesOverlapError","","",3,null],[13,"IoPluginNotFoundError","","",3,null],[13,"HndlNotFoundError","","",3,null],[13,"TooManyFilesError","","",3,null],[13,"Custom","","",3,null],[13,"Parse","","",3,null],[11,"name","","Returns URI of current file descriptor.",4,[[["self"]],["str"]]],[11,"has_paddr","","Returns true if paddr exists in this file descriptor and…",4,[[["self"],["u64"]],["bool"]]],[11,"paddr_base","","Returns the base physical address of this file.",4,[[["self"]],["u64"]]],[11,"size","","Returns size of file on disk.",4,[[["self"]],["u64"]]],[11,"perm","","Returns the permissions which the file was opened with.",4,[[["self"]],["iomode"]]],[11,"hndl","","Returns the Handle of given file descriptor.",4,[[["self"]],["u64"]]],[11,"new","","Returns new Input/Output interface to be used",5,[[],["rio"]]],[11,"load_plugin","","THIS FUNCTION IS NOT SUPPOSED TO BE THAT TRIVIAL I WANT IT…",5,[[["box",["rioplugin"]],["self"],["rioplugin"]]]],[11,"open","","Allows us to open file and have it accessable from out…",5,[[["str"],["self"],["iomode"]],[["ioerror"],["result",["u64","ioerror"]],["u64"]]]],[11,"open_at","","Allows us to open file and have it accessable from out…",5,[[["str"],["iomode"],["self"],["u64"]],[["ioerror"],["result",["u64","ioerror"]],["u64"]]]],[11,"close","","Close an opened file, delete its physical and virtual…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"close_all","","Close all open files, and reset all virtual and physical…",5,[[["self"]]]],[11,"pread","","Read from the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"pread_sparce","","Read from the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["ioerror"],["result",["btreemap","ioerror"]],["btreemap",["u64","u8"]]]]],[11,"pwrite","","Write into the physical address space of current [RIO]…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"map","","Map memory regions from physical address space to virtual…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"unmap","","unmap already mapped regions",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vread","","read memory from virtual address space. If there is no…",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vread_sparce","","read memory from virtual address space. Data is stored in…",5,[[["self"],["u64"]],[["ioerror"],["result",["btreemap","ioerror"]],["btreemap",["u64","u8"]]]]],[11,"vwrite","","write memory into virtual address space",5,[[["self"],["u64"]],[["result",["ioerror"]],["ioerror"]]]],[11,"vir_to_phy","","convert virtual address to physical address",5,[[["self"],["u64"]],[["option",["vec"]],["vec",["riomap"]]]]],[11,"phy_to_vir","","This funciton reverse-queries individual physical…",5,[[["self"],["u64"]],[["vec",["u64"]],["u64"]]]],[11,"uri_iter","","Iterate over open URIs",5,[[["self"]],[["box",["iterator"]],["iterator"]]]],[11,"map_iter","","Iterate over memory maps",5,[[["self"]],[["box",["iterator"]],["iterator"]]]],[11,"hndl_to_desc","","",5,[[["self"],["u64"]],[["option",["riodesc"]],["riodesc"]]]],[18,"WRITE","","",6,null],[18,"READ","","",6,null],[18,"COW","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["iomode"]]],[11,"all","","Returns the set containing all flags.",6,[[],["iomode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[["u64"]],[["option",["iomode"]],["iomode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[["u64"]],["iomode"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[["u64"]],["iomode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["self"],["iomode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["self"],["iomode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["iomode"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["self"],["iomode"],["bool"]]]],[8,"RIOPlugin","","",null,null],[10,"get_metadata","","",7,[[["self"]],["riopluginmetadata"]]],[10,"open","","",7,[[["str"],["self"],["iomode"]],[["ioerror"],["rioplugindesc"],["result",["rioplugindesc","ioerror"]]]]],[10,"accept_uri","","",7,[[["str"],["self"]],["bool"]]],[8,"RIOPluginOperations","","",null,null],[10,"read","","",8,[[["self"],["usize"]],[["result",["ioerror"]],["ioerror"]]]],[10,"write","","",8,[[["self"],["usize"]],[["result",["ioerror"]],["ioerror"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",3,[[["error"]],["ioerror"]]],[11,"extend","","",6,[[["intoiterator"],["self"]]]],[11,"clone","","",0,[[["self"]],["riomap"]]],[11,"clone","","",6,[[["self"]],["iomode"]]],[11,"default","","",5,[[],["rio"]]],[11,"default","","",6,[[],["iomode"]]],[11,"cmp","","",6,[[["self"],["iomode"]],["ordering"]]],[11,"eq","","",0,[[["self"],["riomap"]],["bool"]]],[11,"ne","","",0,[[["self"],["riomap"]],["bool"]]],[11,"eq","","",0,[[["self"],["rc"]],["bool"]]],[11,"eq","","",1,[[["riopluginmetadata"],["self"]],["bool"]]],[11,"ne","","",1,[[["riopluginmetadata"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["iomode"]],["bool"]]],[11,"ne","","",6,[[["self"],["iomode"]],["bool"]]],[11,"eq","","",3,[[["ioerror"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["iomode"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["iomode"]],["bool"]]],[11,"le","","",6,[[["self"],["iomode"]],["bool"]]],[11,"gt","","",6,[[["self"],["iomode"]],["bool"]]],[11,"ge","","",6,[[["self"],["iomode"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["iomode"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["iomode"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["iomode"]],["iomode"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["iomode"]],["iomode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["iomode"]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["iomode"]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["iomode"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"from_iter","","",6,[[["intoiterator"]],["iomode"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["s"],["self"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],[["result",["rio"]],["rio"]]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]]],"p":[[3,"RIOMap"],[3,"RIOPluginMetadata"],[3,"RIOPluginDesc"],[4,"IoError"],[3,"RIODesc"],[3,"RIO"],[3,"IoMode"],[8,"RIOPlugin"],[8,"RIOPluginOperations"]]};
searchIndex["rtrees"] = {"doc":"","i":[[0,"bktree","rtrees","",null,null],[3,"BKTree","rtrees::bktree","Generic BK-Tree Template used to store dictionary like…",null,null],[11,"new","","Returns a new BK-Tree",0,[[],["bktree"]]],[11,"insert","","Inserts a new (key, value) pair into the KB-Tree",0,[[["self"],["k"],["v"]]]],[11,"find","","Search for the closest Item to key with a tolerance…",0,[[["k"],["self"],["u64"]]]],[6,"SpellTree","","a BKTree with string based Key and distance trait…",null,null],[8,"Distance","","This trait used by [BKTree] to tell how close are 2…",null,null],[10,"distance","","",1,[[["self"]],["u64"]]],[0,"ist","rtrees","",null,null],[3,"ISTIterator","rtrees::ist","",null,null],[3,"ISTRefIterator","","",null,null],[3,"IST","","Interval Query data type based on augmented binary search…",null,null],[11,"new","","Returns new Interval Search Tree # Example `use…",2,[[],["ist"]]],[11,"size","","Returns the number of elements in the IST # Example ` use…",2,[[["self"]],["u64"]]],[11,"get_level","","0 will be returned in case of empty IST. If IST has nodes,…",2,[[["self"]],["u64"]]],[11,"insert","","Inserts an element into closed interval [ lo, hi ].…",2,[[["self"],["k"],["v"]]]],[11,"at","","Returns a vector of non mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"at_mut","","Returns a vector of mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"envelop","","Returns a vector of non mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"envelop_mut","","Returns a vector of mutable references of all values that…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"inverse_envelop","","Returns a vector of non mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"inverse_envelop_mut","","Returns a vector of non mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"overlap","","Returns a vector of non mutable references of all values…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"overlap_mut","","Returns a vector of mutable references of all values that…",2,[[["self"],["k"]],[["v"],["vec"]]]],[11,"delete_at","","Deletes all Intervals that that cover point. The returned…",2,[[["self"],["k"]],["vec"]]],[11,"delete_envelop","","Deletes all Intervals that envelop the interval specified…",2,[[["self"],["k"]],["vec"]]],[11,"delete_overlap","","Deletes all Intervals that overlap with the interval…",2,[[["self"],["k"]],["vec"]]],[0,"rbtree","rtrees","",null,null],[3,"TreeIterator","rtrees::rbtree","",null,null],[3,"TreeRefIterator","","",null,null],[3,"RBTree","","A left-leaning red–black (LLRB) Tree, optimized for…",null,null],[11,"is_node","","Return True if the current node is not null node.",3,[[["self"]],["bool"]]],[11,"key","","Returns copy of key of the current Tree node # Panics…",3,[[["self"]],["k"]]],[11,"set_aug_data","","Changes the aug_data stored in the current Tree node. #…",3,[[["a"],["self"]]]],[11,"aug_data","","Returns aug_data stored in the current Tree node. # Panics…",3,[[["self"]],["a"]]],[11,"set_data","","Changes the data stored in the current Tree node. # Panics…",3,[[["self"],["v"]]]],[11,"data","","Returns data stored in the current Tree node. # Panics…",3,[[],["v"]]],[11,"mut_me","","Returns a tuple of tree elements: a mutable reference to…",3,[[["self"]],["leftrightdatatuple"]]],[11,"data_ref","","Returns non-mutable reference to data stored in the…",3,[[["self"]],["v"]]],[11,"data_mut","","Returns mutable reference to data stored in the current…",3,[[["self"]],["v"]]],[11,"set_left","","Set the left subtree of the current Node. # Panics panics…",3,[[["self"],["rbtree"]]]],[11,"left","","Returns the left subtree after ripping it from the current…",3,[[["self"]],["rbtree"]]],[11,"left_ref","","Returns a non-mutable reference to left subtree. # Panics…",3,[[["self"]],["rbtree"]]],[11,"left_mut","","Returns a mutable reference to left subtree. # Panics…",3,[[["self"]],["rbtree"]]],[11,"set_right","","Set the right subtree of the current Node. # Panics panics…",3,[[["self"],["rbtree"]]]],[11,"right","","Returns the right subtree after ripping it from the…",3,[[["self"]],["rbtree"]]],[11,"right_ref","","Returns a non-mutable reference to right subtree. # Panics…",3,[[["self"]],["rbtree"]]],[11,"right_mut","","Returns a mutable reference to right subtree. # Panics…",3,[[["self"]],["rbtree"]]],[11,"new","","Returns new Red Black Tree # Example `use…",3,[[],["rbtree"]]],[11,"size","","Returns the number of elements in the tree # Example `use…",3,[[["self"]],["u64"]]],[11,"get_level","","0 will be returned in case of empty tree. If tree has…",3,[[["self"]],["u64"]]],[11,"delete_min","","Deletes the minimum value in the tree and returns the data…",3,[[["self"]],["option"]]],[11,"insert","","Inserts data associated with key into tree. insert does…",3,[[["a"],["self"],["k"],["v"]]]],[11,"force_sync_aug","","Force recalculating all agumented data from node matching…",3,[[["self"],["k"]]]],[11,"search","","Returns a non mutable references of the data stored at key…",3,[[["self"],["k"]],[["v"],["option"]]]],[11,"search_mut","","Returns a mutable references of the data stored at key. We…",3,[[["self"],["k"]],[["option"],["v"]]]],[11,"delete","","Deletes tree node represented by key. The return value is…",3,[[["self"],["k"]],["option"]]],[6,"LeftRightDataTuple","","Tuple of 3 elements used with [RBTree::mut_me]. The first…",null,null],[8,"Augment","","Used to recalculate augmented data stored in each node.…",null,null],[11,"sync_custom_aug","","",4,[[["self"]]]],[11,"from","rtrees::bktree","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","rtrees::ist","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","rtrees::rbtree","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_iter","rtrees::ist","",2,[[],["istiterator"]]],[11,"into_iter","rtrees::rbtree","",3,[[],["treeiterator"]]],[11,"next","rtrees::ist","",5,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"next","rtrees::rbtree","",7,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"default","rtrees::bktree","",0,[[],["bktree"]]],[11,"default","rtrees::ist","",2,[[],["self"]]],[11,"default","rtrees::rbtree","",3,[[],["rbtree"]]],[11,"serialize","rtrees::ist","",2,[[["s"],["self"]],["result"]]],[11,"serialize","rtrees::rbtree","",3,[[["s"],["self"]],["result"]]],[11,"deserialize","rtrees::ist","",2,[[["d"]],["result"]]],[11,"deserialize","rtrees::rbtree","",3,[[["d"]],["result"]]],[11,"sync_custom_aug","","",4,[[["self"]]]]],"p":[[3,"BKTree"],[8,"Distance"],[3,"IST"],[3,"RBTree"],[8,"Augment"],[3,"ISTIterator"],[3,"ISTRefIterator"],[3,"TreeIterator"],[3,"TreeRefIterator"]]};
searchIndex["test_file"] = {"doc":"","i":[[5,"operate_on_file","test_file","",null,[[["fn"]]]],[5,"operate_on_copy","","",null,[[["str"],["fn"]]]],[5,"operate_on_files","","",null,[[["fn"]]]],[17,"DATA","","",null,null]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);